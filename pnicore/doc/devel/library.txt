Adding a shared library
=======================

Problem:
-------
We want to use several functions provided by the core module also in other
modules.
As the binary object created by distutils depends on the Python version used to
call setup.py a single binary object cannot be build satisfying all Python
version you may want to build the package for. 
Another idea would be to use something like NUMPY and export the API functions. 
However, this approach is extremely dirty and thus not really favorable. 
Thus a different solution had to be found.

Solution:
--------

A shared object on a per Python version basis has to be built. From the point of
distutils this should be possible. However, the question remains where to
install this library. It seems that the sysconfig paths 'platinclude' and
'platstdlib' are not of realy use. so the better approach might be the
following: 
.) install the shared object and its header files below the same directory 
   where the _core.so file is installed 
.) this would mean
   pni/core/include - for header files
   pni/core/lib     - for libraries

This should work in any case, however, we need to pieces of information
1.) how to determine the full installation path of _core.so?
2.) how to do this withoug adding this path to the global list of 
    linker search paths?

The reason why this works is simply because _core.so will be installed in a
directory which contains platform dependent code. It is thus save to put all
other things there too.

Filenames
libcore_api.so - for the libraries binary filename

sysconfig variables
DESTLIB
DESTSHARED (dyn-load)
INCLUDEPY (python include directories)
MULTIARCH (contains the multiarch triplet)

lib-dynload - is a directory where all shared library modules are installed.
